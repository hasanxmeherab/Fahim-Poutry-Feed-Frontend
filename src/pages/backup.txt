import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import api from '../api/api.js';
import { useParams } from 'react-router-dom';
import ReactPaginate from 'react-paginate';

const WholesaleBuyerDetailsPage = () => {
Â  Â  const { id } = useParams();
Â  Â  const [buyer, setBuyer] = useState(null);
Â  Â  const [transactions, setTransactions] = useState([]);
Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  
Â  Â  // State for pagination
Â  Â  const [page, setPage] = useState(1);
Â  Â  const [totalPages, setTotalPages] = useState(0);

Â  Â  // State for the sales form
Â  Â  const [wholesaleProducts, setWholesaleProducts] = useState([]);
Â  Â  const [saleItems, setSaleItems] = useState([]);
Â  Â  // MODIFIED: State now holds pricePerKg instead of a total price
Â  Â  const [newItem, setNewItem] = useState({ name: '', quantity: '1', weight: '', pricePerKg: '' });
Â  Â  const [formError, setFormError] = useState('');
    const [isCashPayment, setIsCashPayment] = useState(false);

Â  Â  const fetchDetails = async () => {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const [buyerRes, transRes, productsRes] = await Promise.all([
                api.get(`/wholesale-buyers/${id}`),
                api.get(`/transactions/wholesale-buyer/${id}?page=${page}`),
                api.get('/wholesale-products')
            ]);
Â  Â  Â  Â  Â  Â  setBuyer(buyerRes.data);
Â  Â  Â  Â  Â  Â  setTransactions(transRes.data.transactions);
Â  Â  Â  Â  Â  Â  setTotalPages(transRes.data.totalPages);
            setWholesaleProducts(productsRes.data);
Â  Â  Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  setError('Failed to fetch details.');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchDetails();
Â  Â  }, [id, page]);

Â  Â  // --- NEW: Real-time calculation for the current item ---
Â  Â  const newItemTotalPrice = (parseFloat(newItem.weight) || 0) * (parseFloat(newItem.pricePerKg) || 0);

Â  Â  const handleNewItemChange = (e) => {
Â  Â  Â  Â  setNewItem({ ...newItem, [e.target.name]: e.target.value });
Â  Â  };

Â  Â  const handleAddItemToSale = () => {
Â  Â  Â  Â  if (!newItem.name || !newItem.quantity || !newItem.weight || !newItem.pricePerKg) {
Â  Â  Â  Â  Â  Â  setFormError('All fields are required for each item.');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
        // MODIFIED: Add the calculated total price to the item before adding it to the cart
Â  Â  Â  Â  const itemToAdd = {
            ...newItem,
            totalPrice: newItemTotalPrice
        };
Â  Â  Â  Â  setSaleItems([...saleItems, itemToAdd]);
Â  Â  Â  Â  setNewItem({ name: '', quantity: '1', weight: '', pricePerKg: '' }); // Reset form
Â  Â  Â  Â  setFormError('');
Â  Â  };

Â  Â  const handleRemoveItemFromSale = (itemIndexToRemove) => {
Â  Â  Â  Â  setSaleItems(saleItems.filter((_, index) => index !== itemIndexToRemove));
Â  Â  };
Â  Â  
Â  Â  const handleSubmitSale = async () => {
Â  Â  if (saleItems.length === 0) {
Â  Â  Â  Â  setFormError('You must add at least one item to the sale.');
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  const payload = {
Â  Â  Â  Â  wholesaleBuyerId: id,
Â  Â  Â  Â  items: saleItems.map(item => ({
            name: item.name,
            quantity: Number(item.quantity) || 0,
            weight: Number(item.weight) || 0,
            price: item.totalPrice
        })),
        isCashPayment: isCashPayment, // <-- NEW: Send payment status
Â  Â  };
Â  Â  try {
Â  Â  Â  Â  await api.post('/sales/wholesale', payload);
Â  Â  Â  Â  toast.success('Wholesale sale created successfully!'); // Using toast instead of alert
Â  Â  Â  Â  setSaleItems([]);
Â  Â  Â  Â  fetchDetails(); // Refresh all page data
Â  Â  } catch (err) {
Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Failed to complete sale.'); // Using toast
Â  Â  }
};

Â  Â  const handleViewReceipt = (transaction) => {
Â  Â  Â  Â  let receiptData = {};
Â  Â  Â  Â  const buyerName = buyer ? buyer.name : 'N/A';

Â  Â  Â  Â  if (transaction.type === 'WHOLESALE_SALE') {
Â  Â  Â  Â  Â  Â  receiptData = {
Â  Â  Â  Â  Â  Â  Â  Â  type: 'wholesale_sale', // A new, specific type
Â  Â  Â  Â  Â  Â  Â  Â  customerName: buyerName,
Â  Â  Â  Â  Â  Â  Â  Â  items: transaction.customItems,
Â  Â  Â  Â  Â  Â  Â  Â  totalAmount: transaction.amount,
Â  Â  Â  Â  Â  Â  Â  Â  balanceBefore: transaction.balanceBefore,
Â  Â  Â  Â  Â  Â  Â  Â  balanceAfter: transaction.balanceAfter,
Â  Â  Â  Â  Â  Â  Â  Â  date: transaction.createdAt,
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  } else if (['DEPOSIT', 'WITHDRAWAL'].includes(transaction.type)) {
Â  Â  Â  Â  Â  Â  receiptData = {
Â  Â  Â  Â  Â  Â  Â  Â  type: 'deposit',
Â  Â  Â  Â  Â  Â  Â  Â  customerName: buyerName,
Â  Â  Â  Â  Â  Â  Â  Â  depositAmount: transaction.amount,
Â  Â  Â  Â  Â  Â  Â  Â  balanceBefore: transaction.balanceBefore,
Â  Â  Â  Â  Â  Â  Â  Â  balanceAfter: transaction.balanceAfter,
Â  Â  Â  Â  Â  Â  Â  Â  date: transaction.createdAt,
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  sessionStorage.setItem('receiptData', JSON.stringify(receiptData));
Â  Â  Â  Â  window.open('/receipt', '_blank');
Â  Â  };

    // MODIFIED: The final total is now a sum of each item's calculated total price
Â  Â  const saleTotal = saleItems.reduce((acc, item) => acc + item.totalPrice, 0);

Â  Â  if (isLoading) return <p>Loading details...</p>;
Â  Â  if (error) return <p style={{ color: 'red' }}>{error}</p>;
Â  Â  if (!buyer) return <p>Buyer not found.</p>;

Â  Â  return (
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <div className="page-header"><h1>{buyer.name}</h1></div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* Buyer Information Card */}
Â  Â  Â  Â  Â  Â  <div style={{ background: 'white', padding: '20px', borderRadius: '5px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)', marginBottom: '30px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <h3>Buyer Information</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Business Name:</strong> {buyer.businessName || 'N/A'}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Phone:</strong> {buyer.phone}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Current Balance:</strong> TK {buyer.balance.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Make a Wholesale Sale Form */}
Â  Â  Â  Â  Â  Â  <div style={{ background: 'white', padding: '20px', borderRadius: '5px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)', marginBottom: '30px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <h3>Make a Wholesale Sale ðŸ›’</h3>
Â  Â  Â  Â  Â  Â  Â  Â  {/* This first div now only contains the inputs */}
            <div style={{ display: 'grid', gridTemplateColumns: '3fr 1fr 1fr 1fr', gap: '10px' }}>
                <select name="name" value={newItem.name} onChange={handleNewItemChange}>
                    <option value="" disabled>-- Select a Product --</option>
                    {wholesaleProducts.map(product => (
                        <option key={product._id} value={product.name}>{product.name}</option>
                    ))}
                </select>
                <input type="number" name="quantity" placeholder="Quantity" value={newItem.quantity} onChange={handleNewItemChange} />
                <input type="number" name="weight" placeholder="Weight (kg)" value={newItem.weight} onChange={handleNewItemChange} />
                <input type="number" name="pricePerKg" placeholder="Price/kg (TK)" value={newItem.pricePerKg} onChange={handleNewItemChange} />
            </div>

            {/* This new div contains the total and the button on their own line */}
            <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginTop: '15px' }}>
                <div style={{ fontWeight: 'bold', fontSize: '1.2em', marginRight: '20px' }}>
                    Total: {newItemTotalPrice.toFixed(2)}
                </div>
                <button onClick={handleAddItemToSale} className="button-primary">Add Item</button>
            </div>

Â  Â  Â  Â  Â  Â  Â  Â  {saleItems.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div style={{marginTop: '20px'}}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4>Items to Sell</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead>
                            <tr><th>Name</th><th>Qty</th><th>Weight</th><th>Price/kg</th><th>Total Price</th><th>Remove</th></tr>
                        </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {saleItems.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={index}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.quantity}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.weight} kg</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>TK {item.pricePerKg}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>TK {item.totalPrice.toFixed(2)}</td>
                                        <td>
                                        <button onClick={() => handleRemoveItemFromSale(index)} className="button-danger" style={{padding: '5px 10px'}}>
                                            X
                                        </button>
                                    </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </table>
                    <h3 style={{textAlign: 'right', marginTop: '15px'}}>Final Total: TK {saleTotal.toFixed(2)}</h3>Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {formError && <p style={{ color: 'red', marginTop: '10px' }}>{formError}</p>}
                <div style={{ marginTop: '15px', fontSize: '1.1em' }}>
            <label>
                <input 
                    type="checkbox"
                    checked={isCashPayment}
                    onChange={(e) => setIsCashPayment(e.target.checked)}
                    style={{ marginRight: '10px', transform: 'scale(1.2)' }}
                />
                Paid in Cash ðŸ’µ
            </label>
        </div>
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleSubmitSale} className="button-success" style={{width: '100%', marginTop: '20px', padding: '12px'}}>Complete Sale</button>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* --- THIS SECTION IS UNCHANGED --- */}
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <h2>Transaction History</h2>
Â  Â  Â  Â  Â  Â  Â  Â  <table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead>
                        <tr><th>Date</th><th>Type</th><th>Details</th><th>Amount (TK)</th><th>Actions</th></tr>Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {transactions.map((t) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={t._id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{new Date(t.createdAt).toLocaleString()}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{t.type}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{t.notes}</td>
                                <td style={{ color: ['SALE', 'WHOLESALE_SALE', 'WITHDRAWAL'].includes(t.type) ? 'red' : 'green' }}>
                                Â  {t.amount.toFixed(2)}
                                </td>
                                <td>
                                    {['WHOLESALE_SALE', 'DEPOSIT', 'WITHDRAWAL'].includes(t.type) && (
                                        <button onClick={() => handleViewReceipt(t)} className="button-primary">
                                            View Receipt
                                        </button>
                                    )}
                                </td>
                                Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
                                </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  Â  {totalPages > 1 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ReactPaginate
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  previousLabel={'< Previous'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  nextLabel={'Next >'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pageCount={totalPages}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onPageChange={(data) => setPage(data.selected + 1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  containerClassName={'pagination'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeClassName={'active'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  forcePage={page - 1}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default WholesaleBuyerDetailsPage;