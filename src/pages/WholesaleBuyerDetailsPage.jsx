import React, { useState, useEffect } from 'react';
import api from '../api/api.js';
import { useParams } from 'react-router-dom';
import ReactPaginate from 'react-paginate';
import { toast } from 'react-toastify';

const WholesaleBuyerDetailsPage = () => {
Â  Â  const { id } = useParams();
Â  Â  const [buyer, setBuyer] = useState(null);
Â  Â  const [transactions, setTransactions] = useState([]);
Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  
Â  Â  const [page, setPage] = useState(1);
Â  Â  const [totalPages, setTotalPages] = useState(0);

Â  Â  const [wholesaleProducts, setWholesaleProducts] = useState([]);
Â  Â  const [saleItems, setSaleItems] = useState([]);
Â  Â  const [newItem, setNewItem] = useState({ name: '', quantity: '1', weight: '', pricePerKg: '' });
Â  Â  const [isCashPayment, setIsCashPayment] = useState(false);
    const [formError, setFormError] = useState(''); // <-- ADDED: This was missing

Â  Â  const fetchDetails = async () => {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const [buyerRes, transRes, productsRes] = await Promise.all([
Â  Â  Â  Â  Â  Â  Â  Â  api.get(`/wholesale-buyers/${id}`),
Â  Â  Â  Â  Â  Â  Â  Â  api.get(`/transactions/wholesale-buyer/${id}?page=${page}`),
Â  Â  Â  Â  Â  Â  Â  Â  api.get('/wholesale-products')
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  Â  Â  setBuyer(buyerRes.data);
Â  Â  Â  Â  Â  Â  setTransactions(transRes.data.transactions);
Â  Â  Â  Â  Â  Â  setTotalPages(transRes.data.totalPages);
Â  Â  Â  Â  Â  Â  setWholesaleProducts(productsRes.data);
Â  Â  Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  setError('Failed to fetch details.');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchDetails();
Â  Â  }, [id, page]);

Â  Â  const newItemTotalPrice = (parseFloat(newItem.weight) || 0) * (parseFloat(newItem.pricePerKg) || 0);
Â  Â  const saleTotal = saleItems.reduce((acc, item) => acc + item.totalPrice, 0);

Â  Â  const handleNewItemChange = (e) => {
Â  Â  Â  Â  setNewItem({ ...newItem, [e.target.name]: e.target.value });
Â  Â  };

Â  Â  const handleAddItemToSale = () => {
Â  Â  Â  Â  if (!newItem.name || !newItem.quantity || !newItem.weight || !newItem.pricePerKg) {
Â  Â  Â  Â  Â  Â  setFormError('All fields are required for each item.');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  const itemToAdd = { ...newItem, totalPrice: newItemTotalPrice };
Â  Â  Â  Â  setSaleItems([...saleItems, itemToAdd]);
Â  Â  Â  Â  setNewItem({ name: '', quantity: '1', weight: '', pricePerKg: '' });
Â  Â  Â  Â  setFormError('');
Â  Â  };

Â  Â  const handleRemoveItemFromSale = (itemIndexToRemove) => {
Â  Â  Â  Â  setSaleItems(saleItems.filter((_, index) => index !== itemIndexToRemove));
Â  Â  };

Â  Â  const handleViewReceipt = (transaction) => {
Â  Â  Â  Â  let receiptData = {};
Â  Â  Â  Â  const buyerName = buyer ? buyer.name : 'N/A';
Â  Â  Â  Â  if (transaction.type === 'WHOLESALE_SALE') {
Â  Â  Â  Â  Â  Â  receiptData = { type: 'wholesale_sale', customerName: buyerName, items: transaction.customItems, totalAmount: transaction.amount, balanceBefore: transaction.balanceBefore, balanceAfter: transaction.balanceAfter, date: transaction.createdAt };
Â  Â  Â  Â  } else if (['DEPOSIT', 'WITHDRAWAL'].includes(transaction.type)) {
Â  Â  Â  Â  Â  Â  receiptData = { type: 'deposit', customerName: buyerName, depositAmount: transaction.amount, balanceBefore: transaction.balanceBefore, balanceAfter: transaction.balanceAfter, date: transaction.createdAt };
Â  Â  Â  Â  } else { return; }
Â  Â  Â  Â  sessionStorage.setItem('receiptData', JSON.stringify(receiptData));
Â  Â  Â  Â  window.open('/receipt', '_blank');
Â  Â  };

Â  Â  const handleSubmitSale = async () => {
Â  Â  if (saleItems.length === 0) {
Â  Â  Â  Â  setFormError('You must add at least one item to the sale.');
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  const payload = {
Â  Â  Â  Â  wholesaleBuyerId: id,
Â  Â  Â  Â  items: saleItems.map(item => ({
Â  Â  Â  Â  Â  Â  name: item.name,
Â  Â  Â  Â  Â  Â  quantity: Number(item.quantity) || 0,
Â  Â  Â  Â  Â  Â  weight: Number(item.weight) || 0,
Â  Â  Â  Â  Â  Â  price: item.totalPrice,
Â  Â  Â  Â  })),
Â  Â  Â  Â  isCashPayment: isCashPayment,
Â  Â  };
Â  Â  try {
Â  Â  Â  Â  // MODIFIED: Capture the response from the API
Â  Â  Â  Â  const response = await api.post('/sales/wholesale', payload);
Â  Â  Â  Â  const newTransaction = response.data; // This is the new transaction object

Â  Â  Â  Â  toast.success('Wholesale sale created successfully!');
Â  Â  Â  Â  
        // --- NEW: Logic to open the receipt ---
        const receiptData = {
            type: 'wholesale_sale',
            customerName: buyer.name,
            items: newTransaction.customItems,
            totalAmount: newTransaction.amount,
            balanceBefore: newTransaction.balanceBefore,
            balanceAfter: newTransaction.balanceAfter,
            date: newTransaction.createdAt,
        };
        sessionStorage.setItem('receiptData', JSON.stringify(receiptData));
        window.open('/receipt', '_blank');

Â  Â  Â  Â  setSaleItems([]);
Â  Â  Â  Â  fetchDetails(); // Refresh the page data

Â  Â  } catch (err) {
Â  Â  Â  Â  toast.error(err.response?.data?.message || 'Failed to complete sale.');
Â  Â  }
};

Â  Â  if (isLoading) return <p>Loading details...</p>;
Â  Â  if (error) return <p style={{ color: 'red' }}>{error}</p>;
Â  Â  if (!buyer) return <p>Buyer not found.</p>;

Â  Â  return (
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <div className="page-header"><h1>{buyer.name}</h1></div>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <div style={{ background: 'white', padding: '20px', borderRadius: '5px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)', marginBottom: '30px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <h3>Buyer Information</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Business Name:</strong> {buyer.businessName || 'N/A'}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Phone:</strong> {buyer.phone}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Current Balance:</strong> TK {buyer.balance.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div style={{ background: 'white', padding: '20px', borderRadius: '5px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)', marginBottom: '30px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <h3>Make a Wholesale Sale ðŸ›’</h3>
                
                {/* CLEANED UP: Input fields */}
Â  Â  Â  Â  Â  Â  Â  Â  <div style={{ display: 'grid', gridTemplateColumns: '3fr 1fr 1fr 1fr', gap: '10px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select name="name" value={newItem.name} onChange={handleNewItemChange}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="" disabled>-- Select a Product --</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {wholesaleProducts.map(product => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={product._id} value={product.name}>{product.name}</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" name="quantity" placeholder="Quantity" value={newItem.quantity} onChange={handleNewItemChange} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" name="weight" placeholder="Weight (kg)" value={newItem.weight} onChange={handleNewItemChange} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="number" name="pricePerKg" placeholder="Price/kg (TK)" value={newItem.pricePerKg} onChange={handleNewItemChange} />
Â  Â  Â  Â  Â  Â  Â  Â  </div>

                {/* CLEANED UP: Total and Add Item button */}
Â  Â  Â  Â  Â  Â  Â  Â  <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginTop: '15px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div style={{ fontWeight: 'bold', fontSize: '1.2em', marginRight: '20px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Total: TK {newItemTotalPrice.toFixed(2)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleAddItemToSale} className="button-primary">Add Item</button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {saleItems.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div style={{marginTop: '20px'}}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4>Items to Sell</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr><th>Name</th><th>Qty</th><th>Weight</th><th>Price/kg</th><th>Total Price</th><th>Remove</th></tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {saleItems.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={index}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.name}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.quantity}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{item.weight} kg</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>TK {item.pricePerKg}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>TK {item.totalPrice.toFixed(2)}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td><button onClick={() => handleRemoveItemFromSale(index)} className="button-danger" style={{padding: '5px 10px'}}>X</button></td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 style={{textAlign: 'right', marginTop: '15px'}}>Final Total: TK {saleTotal.toFixed(2)}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <div style={{ marginTop: '15px', fontSize: '1.1em' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input type="checkbox" checked={isCashPayment} onChange={(e) => setIsCashPayment(e.target.checked)} style={{ marginRight: '10px' }}/>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Paid in Cash ðŸ’µ
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
                {formError && <p style={{ color: 'red', marginTop: '10px' }}>{formError}</p>}
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={handleSubmitSale} className="button-success" style={{width: '100%', marginTop: '20px', padding: '12px'}}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Complete Sale
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <h2>Transaction History</h2>
Â  Â  Â  Â  Â  Â  Â  Â  <table>
Â  Â  _Â  Â  Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr><th>Date</th><th>Type</th><th>Details</th><th>Amount (TK)</th><th>Actions</th></tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {transactions.map((t) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={t._id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{new Date(t.createdAt).toLocaleString()}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{t.type}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>{t.notes}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td style={{ color: ['WITHDRAWAL', 'WHOLESALE_SALE'].includes(t.type) ? 'red' : 'green' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {t.amount.toFixed(2)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {['WHOLESALE_SALE', 'DEPOSIT', 'WITHDRAWAL'].includes(t.type) && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => handleViewReceipt(t)} className="button-primary">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  View Receipt
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  Â  {totalPages > 1 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ReactPaginate
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  previousLabel={'< Previous'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  nextLabel={'Next >'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  pageCount={totalPages}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onPageChange={(data) => setPage(data.selected + 1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  containerClassName={'pagination'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeClassName={'active'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  forcePage={page - 1}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default WholesaleBuyerDetailsPage;